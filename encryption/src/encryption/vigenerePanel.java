/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package encryption;
/**
 *
 * @author Andrei
 */
public class vigenerePanel extends javax.swing.JPanel {

    private static char[][] grid = new char[26][26];

    /**
     * Creates new form vigenerePanel
     */
    public vigenerePanel() {
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        vigenereBtnGrp = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        cipherTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        keyTextField = new javax.swing.JTextField();
        pcButton = new javax.swing.JRadioButton();
        cpButton = new javax.swing.JRadioButton();
        solveButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        plainTextArea.setColumns(20);
        plainTextArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        plainTextArea.setRows(5);
        jScrollPane1.setViewportView(plainTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jScrollPane1, gridBagConstraints);

        cipherTextArea.setColumns(20);
        cipherTextArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        cipherTextArea.setRows(5);
        cipherTextArea.setEnabled(false);
        jScrollPane2.setViewportView(cipherTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 12, 5, 12);
        add(jScrollPane2, gridBagConstraints);

        jLabel1.setText("Plaintext");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 12, 0, 0);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Ciphertext");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 12, 0, 0);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Key:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(jLabel3, gridBagConstraints);

        keyTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 50);
        add(keyTextField, gridBagConstraints);

        vigenereBtnGrp.add(pcButton);
        pcButton.setSelected(true);
        pcButton.setText("P -> C");
        pcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(pcButton, gridBagConstraints);

        vigenereBtnGrp.add(cpButton);
        cpButton.setText("C -> P");
        cpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        add(cpButton, gridBagConstraints);

        solveButton.setText("Solve");
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(solveButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        if (cpButton.isSelected()) {
            decrypt();
        } else {
            encrypt();
        }
    }//GEN-LAST:event_solveButtonActionPerformed

    private void pcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcButtonActionPerformed
        plainTextArea.setEnabled(true);
        cipherTextArea.setText("");
        cipherTextArea.setEnabled(false);
    }//GEN-LAST:event_pcButtonActionPerformed

    private void cpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpButtonActionPerformed
        plainTextArea.setText("");
        plainTextArea.setEnabled(false);
        cipherTextArea.setEnabled(true);
    }//GEN-LAST:event_cpButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea cipherTextArea;
    private javax.swing.JRadioButton cpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField keyTextField;
    private javax.swing.JRadioButton pcButton;
    private javax.swing.JTextArea plainTextArea;
    private javax.swing.JButton solveButton;
    private javax.swing.ButtonGroup vigenereBtnGrp;
    // End of variables declaration//GEN-END:variables

    private void decrypt() {
        if (keyTextField.getText().length() != 0 && cipherTextArea.getText().length() != 0) {
            String codedMsg, k, plainMsg = "";
            char encoded[], plain[], key[];
            int msgLength, keyLength, count = 0;

            codedMsg = cipherTextArea.getText().toLowerCase().replaceAll("[^a-z]", "");
            encoded = codedMsg.toCharArray();
            msgLength = codedMsg.length();
            plain = new char[msgLength];

            k = keyTextField.getText().toLowerCase().replaceAll("[^a-z]", "");
            key = k.toCharArray();
            keyLength = k.length();

            while (count < msgLength) {
                if (encoded[count] - 65 - (key[count % keyLength] - 65) < 0) {
                    plain[count] = grid[0][encoded[count] - 65 - (key[count % keyLength] - 65) + 26];
                } else {
                    plain[count] = grid[0][encoded[count] - 65 - (key[count % keyLength] - 65)];
                }
                ++count;
            }

            //writes the decoded messagee
            for (int i = 0; i < msgLength; ++i) {
                plainMsg += plain[i];
            }
            plainTextArea.setText(plainMsg);
        }

    }

    private void encrypt() {
        if (keyTextField.getText().length() != 0 && plainTextArea.getText().length() != 0) {
            String plainMsg, k, input, cipherMsg;
            char encoded[], plain[], key[];
            int msgLength, keyLength, count = 0;

            plainMsg = plainTextArea.getText().replaceAll("[^a-z]", "").toLowerCase();
            plain = plainMsg.toCharArray();
            msgLength = plainMsg.length();
            encoded = new char[msgLength];

            k = keyTextField.getText().replaceAll("[^a-z]", "").toLowerCase();
            key = k.toCharArray();
            keyLength = k.length();

            while (count < msgLength) {
                encoded[count] = grid[key[count % keyLength] - 97][plain[count] - 97];
                ++count;
            }

            //writes the encoded message
            cipherMsg = "";
            for (int i = 0; i < msgLength; ++i) {
                cipherMsg += encoded[i];
            }
            cipherTextArea.setText(cipherMsg);
        }
    }

    private static void initialize() {
        for (int i = 0; i < 26; ++i) {
            for (int j = 0; j < 26; ++j) {
                grid[i][j] = (char) ((j + i) % 26 + 65);
            }
        }
    }
}
