package encryption;

import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.*;

public class railFencePanel extends javax.swing.JPanel {
    public railFencePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        cipherTextArea = new javax.swing.JTextArea();
        cpButton = new javax.swing.JRadioButton();
        pcButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        keyComboBox = new javax.swing.JComboBox();
        solveButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cpButton1 = new javax.swing.JRadioButton();
        pcButton1 = new javax.swing.JRadioButton();

        setLayout(new java.awt.GridBagLayout());

        plainTextArea.setColumns(20);
        plainTextArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        plainTextArea.setRows(5);
        jScrollPane1.setViewportView(plainTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 15);
        add(jScrollPane1, gridBagConstraints);

        cipherTextArea.setColumns(20);
        cipherTextArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        cipherTextArea.setRows(5);
        cipherTextArea.setEnabled(false);
        jScrollPane2.setViewportView(cipherTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 15, 6, 15);
        add(jScrollPane2, gridBagConstraints);

        buttonGroup1.add(cpButton);
        cpButton.setText("C -> P");
        cpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        add(cpButton, gridBagConstraints);

        buttonGroup1.add(pcButton);
        pcButton.setSelected(true);
        pcButton.setText("P -> C");
        pcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(pcButton, gridBagConstraints);

        jLabel1.setText("Plaintext");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 6, 18);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Ciphertext");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(12, 18, 0, 18);
        add(jLabel2, gridBagConstraints);

        keyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(keyComboBox, gridBagConstraints);

        solveButton.setText("Solve");
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 1, 0, 1);
        add(solveButton, gridBagConstraints);

        jLabel3.setText("Key:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 5);
        add(jLabel3, gridBagConstraints);

        buttonGroup1.add(cpButton1);
        cpButton1.setText("C -> P");
        cpButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        add(cpButton1, gridBagConstraints);

        buttonGroup1.add(pcButton1);
        pcButton1.setText("P -> C");
        pcButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(pcButton1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        int key = keyComboBox.getSelectedIndex() +2;

        if(cpButton.isSelected() && cipherTextArea.getText().length()!= 0){
            plainTextArea.setText(decrypt(cipherTextArea.getText(), key));
        }else if(pcButton.isSelected() && plainTextArea.getText().length()!= 0){
            cipherTextArea.setText(encrypt(plainTextArea.getText(), key));
        }
    }//GEN-LAST:event_solveButtonActionPerformed

    private void cpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpButtonActionPerformed
        plainTextArea.setText("");
        plainTextArea.setEnabled(false);
        cipherTextArea.setEnabled(true);
    }//GEN-LAST:event_cpButtonActionPerformed

    private void pcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcButtonActionPerformed
        plainTextArea.setEnabled(true);
        cipherTextArea.setText("");
        cipherTextArea.setEnabled(false);
    }//GEN-LAST:event_pcButtonActionPerformed

private void cpButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpButton1ActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_cpButton1ActionPerformed

private void pcButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcButton1ActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_pcButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea cipherTextArea;
    private javax.swing.JRadioButton cpButton;
    private javax.swing.JRadioButton cpButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox keyComboBox;
    private javax.swing.JRadioButton pcButton;
    private javax.swing.JRadioButton pcButton1;
    private javax.swing.JTextArea plainTextArea;
    private javax.swing.JButton solveButton;
    // End of variables declaration//GEN-END:variables

    private String encrypt(String plaintext, int key){
        String result = "";

        plaintext = plaintext.toLowerCase();
        plaintext = plaintext.replaceAll("[^a-z]", ""); //ptxt is english alphabet only
        
        ArrayList<String> list = new ArrayList<String>();
        int length = plaintext.length();

        // Create index number of strings
        for(int index = 0; index < key; index++)
        {
            list.add(new String());
        }

        // Equation:  (index mod (key-1)*2) - (index mod (key-1)*2)/key * (2+(2*(index mod (key-1)*2) mod key))
        for(int index = 0; index < length; index++)
        {
            int kmod = index %((key-1)*2);
            int strLoc = kmod - (kmod/key) * (2 + (2 * (kmod%key)));
            list.set(strLoc, list.get(strLoc) + plaintext.charAt(index));
        }

        // Join the strings together
        for(int index = 0; index < key; index++)
        {
            result = result + list.get(index);
        }

        return result;
    }
    
    private String decrypt(String ciphertext, int key){
        String plaintext = "";
        int[] rowSizes = new int[key];
        LinkedList[] lists = new LinkedList[key];
        int textLength = ciphertext.length();
        int order = 2 * (key - 1);
        int numIter = textLength / order;
        int numMod = textLength % order;
        calcRowSizes(rowSizes, key, numIter, numMod);

        //build the lists
        for(int index = 0; index < key; index++)
        {
            lists[index] = new LinkedList();
            for(int count = 0; count < rowSizes[index]; count++)
            {
                lists[index].add(ciphertext.charAt(0));
                ciphertext = ciphertext.substring(1);
            }
        }

        for(int index = 0; index < textLength; index++)
        {
            if(index % order < key)
            {
                plaintext += lists[index % order].remove(0);
            }
            else
            {
                plaintext += lists[order - (index % order)].remove(0);
            }
        }

        return plaintext;
    }

    private void calcRowSizes(int[] rows, int size, int iterations, int mod)
    {
        zeroArray(rows, size);

        for(int index = 0; index < size; index++)
        {
            if(index == 0 || index == size -1)
            {
                rows[index] = iterations;
            }
            else
            {
                rows[index] = 2 * iterations;
            }
        }

        for(int index = 0; index < size && mod > 0; index++, mod--)
        {
            rows[index] += 1;
        }

        if(mod > 0)
        {
            for(int index = size-2; index > 0 && mod > 0; index--, mod--)
            {
                rows[index] += 1;
            }
        }
    }

    private void zeroArray(int[] array, int size)
    {
        for(int i = 0; i < size; i++)
        {
            array[i] = 0;
        }
    }
}
