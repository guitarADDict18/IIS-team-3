/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package encryption;

/**
 *
 * @author Andrei
 */
public class transpositionPanel extends javax.swing.JPanel {

    /**
     * Creates new form transpositionPanel
     */
    public transpositionPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        transBtnGrp = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        cipherTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        visTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        keyTextField = new javax.swing.JTextField();
        pcButton = new javax.swing.JRadioButton();
        cpButton = new javax.swing.JRadioButton();
        solveButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        plainTextArea.setColumns(20);
        plainTextArea.setRows(5);
        jScrollPane1.setViewportView(plainTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 10, 15);
        add(jScrollPane1, gridBagConstraints);

        cipherTextArea.setColumns(20);
        cipherTextArea.setRows(5);
        cipherTextArea.setEnabled(false);
        jScrollPane2.setViewportView(cipherTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 15);
        add(jScrollPane2, gridBagConstraints);

        visTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        visTable.setPreferredSize(new java.awt.Dimension(200, 64));
        visTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(visTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(jScrollPane3, gridBagConstraints);

        jLabel1.setText("Plaintext");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 19, 0, 4);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Ciphertext");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Visualization Table");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        add(keyTextField, gridBagConstraints);

        transBtnGrp.add(pcButton);
        pcButton.setSelected(true);
        pcButton.setText("P -> C");
        pcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(pcButton, gridBagConstraints);

        transBtnGrp.add(cpButton);
        cpButton.setText("C -> P");
        cpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        add(cpButton, gridBagConstraints);

        solveButton.setText("Solve");
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(solveButton, gridBagConstraints);

        jLabel4.setText("Key:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(jLabel4, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        if (cpButton.isSelected()) {
            decrypt();
        } else {
            encrypt();
        }
    }//GEN-LAST:event_solveButtonActionPerformed

    private void pcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcButtonActionPerformed
        plainTextArea.setEnabled(true);
        cipherTextArea.setText("");
        cipherTextArea.setEnabled(false);
    }//GEN-LAST:event_pcButtonActionPerformed

    private void cpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpButtonActionPerformed
        plainTextArea.setText("");
        plainTextArea.setEnabled(false);
        cipherTextArea.setEnabled(true);
    }//GEN-LAST:event_cpButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea cipherTextArea;
    private javax.swing.JRadioButton cpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField keyTextField;
    private javax.swing.JRadioButton pcButton;
    private javax.swing.JTextArea plainTextArea;
    private javax.swing.JButton solveButton;
    private javax.swing.ButtonGroup transBtnGrp;
    private javax.swing.JTable visTable;
    // End of variables declaration//GEN-END:variables

    private void encrypt() {
        if (plainTextArea.getText().length() != 0 && keyTextField.getText().length() != 0) {
            //Text area and key field isn't empty so we now check key length
            if (keyTextField.getText().length() <= plainTextArea.getText().length()) {
                //check if this is a valid key
                String key = keyTextField.getText().toLowerCase().replaceAll("\\s", "");
                boolean invalidKey = false;
                for (int index = 0, loop = 1; loop < key.length(); loop++) {
                    if (key.charAt(index) == key.charAt(loop)) {
                        invalidKey = true;
                    }
                    if (loop == key.length() - 1) {
                        loop = ++index;
                    }
                }
                if(!invalidKey){
                    int keyLen = keyTextField.getText().length();
                    String plainText = plainTextArea.getText().toLowerCase().replaceAll("\\s", "");
                    String cipherText = "";
                    int numRows = plainText.length() / keyLen;
                    boolean remainder = false;
                    String[] table;

                    //if the key length does not evenly divide the message length
                    if ((plainText.length() % keyLen) > 0) {
                        remainder = true;
                        table = new String[numRows + 1];
                    } else {
                        table = new String[numRows];
                    }
                    //generate all the rows for the table
                    for (int i = 0; i < numRows; ++i) {
                        table[i] = plainText.substring(i * keyLen, i * keyLen + keyLen + 1);
                    }
                    if (remainder) {
                        table[numRows] = plainText.substring(numRows * keyLen);
                    }

                    cipherTextArea.setText(cipherText);
                }
            }
        }
    }

    private void decrypt() {
        if (cipherTextArea.getText().length() != 0) {
            //Text area key field isn't empty so we can perform the decryption
            String key = keyTextField.getText();
            String cipherText = cipherTextArea.getText().toLowerCase();
            cipherText = cipherText.replaceAll("\\s", "");
            String plainText = "";

            plainTextArea.setText(plainText);
        }

    }
}
